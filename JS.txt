HTML : 하이퍼텍스트 마크업 언어 = 뼈대의 역할
CSS : 캐스팅 스타일 시트 = 옷
JS : 자바 스크립트 = 행동/동작
[JS] JAVAScript
    - 2009년 이후 node.js가 나오면서 백엔드 역할 가능해졌다.
    - 요즘 트렌드에서는 자바스크립트가 매우 중요한 역할을 한다.
    1. 웹클라이언트 (HTML,CSS,JS)
    2. 웹 서버(node.js)
    3. 모바일(react.js native)
    4. 소프트웨어(NW.js)

[JS 사용하는 방법]
    방법 1 : html 파일 내 <body> 마크업 안에서 <Script> 마크업 사용한다.
    방법 2(권장) : JS 파일을(.js) 생성하여 <head> 또는 <body> 마크업에서 js 파일을 불러온다.
        1. html이 모두 렌더링(생성)이 되기 전에 js 실행
        <head>
            <Script src="js파일경로"> </Script>
        </head>
        2. html 모두 렌더링(생성) 된 후에 실행


[데이터]
    - 데이터란? 한국어로는 자료 , 컴퓨터언어가 이해하는 자료들, 즉 리터럴
    1. 숫자 : 10 . 3.14 
    2. 문자 : '안녕' , "안녕" , `안녕`
    3. 논리 : true , false

[타입/자료형/분류]
    - 데이터들을 특정한 기준으로 분류한것
    - 기본타입
        숫자타입 : Number 
        문자타입 : String
        논리타입 : Boolean

[JS 출력함수]
    1.console.log( )    : 브라우저의 F12(개발자도구) 메뉴[console]탭에서 출력하는 함수.

[JS 입력함수]
    1. prompt( ) : 알림 메시지와 입력(input) 기능을 제공하는 함수. * 함수 1개당 입력 1개
        * 입력받은 값을 문자타입으로 반환 *
            - 숫자타입으로 입력받기 : Number(prompt());   

[이스케이프/제어문자]
    1. \n : 줄바꿈
    2. \t : 들여쓰기
    3. \\ : \ 출력
    4. \' : ' 한개 출력
    5. \" : " 한개 출력

[변수 외 상수]
    - 공통 : 
        1. 데이터 *1개*를 저장할 수 있는 메모리 공간
        2. 메모리 공간의 상징적인 이름이 존재한다. 변수명,상수명
    1. 변수 : 변하는 수/값
        1. 변수 선언 : let 키워드
            let 변수명 ;    * 값이 없는 변수 호출 시 undefined
        2. 변수 초기화 : 변수 선언시 처음에 값 대입 행위
            let 변수명 = 초기값;
        3. 변수 값 호출 : 변수명을 작성하면 변수가 갖는 값이 반환된다.
            변수명
        4. 변수 값 수정 : 기존 변수명을 호출해서 새로운 값 대입
            변수명 = 새로운 값
        5. 변수 연산
            변수명A + 데이터 + 변수명B

    2. 상수 : 변하지 않는 수/값
        1. 상수 선언 : const 키워드
            const 상수명 = 초기값;  *상수는 무조건 초기값을 넣어야한다.
        2. 상수 값 호출
            상수명
        3. 상수 값 수정 [x] : 상수는 수정이 불가능하다.
            - Assignment to constant variale. 오류 발생
        4. 상수 연산
            상수명A + 데이터 + 상수명B

[연산자]
    - 연산(계산)결과를 *하나*로 도출하는 과정
    - 연산(계산)에 사용되는 기호/특수문자
    - 종류
        1.산술연산자    : + 덧셈 , - 뺄셈 , * 곱셈 , / 나눗셈 , %나머지 parseInt()
        2.연결연산자    : + 앞 뒤에 문자가 존재하면 덧셈이 아닌 연결을 한다.
        3.비교연산자    : >초과 <미만 >=이상 <=이하 ==(값)같다 !=(값)다르다 ===(타입과값)같다 !==(타입과값)다르다
        4.관계연산자 
            && : 이면서 이고 모두 그리고
                true && true -> true , true && false -> false
            || : 이거나 거나 또는 하나라도
            ! : 부정 , 반대 , true -> false , flase -> true 
                !true -> false , !false -> true
        5.복합대입연산자
            = 오른쪽 항(값)을 왼쪽 항(변수)에 대입한다.
            += 오른쪽 항(값)을 왼쪽 항 값과 더한 후에 왼쪽 항(변수)에 대입한다.
            -= , *= , /= , %=
        6.증감연산자 : 변수명 앞뒤에 ++ 또는 -- 입력하여 변수의 1 증가 또는 감소
            ++변수명 : 선위증가     --변수명 : 선위감소
            변수명++ : 후위증가     변수명-- : 후위감소
            * 주의할점 : 변수에 1증가 코드 작성하시오.
                let value = 10;
                방법1) value = value + 1;
                방법2) value += 1;
                방법3) value++;
            *2. ;(세미클론)명령 단위 기준으로 우선순위를 정한다.
                ++value;   vs   value++; 결과는 같다.
                console.log(++value);   vs   console.log(value++); 결과가 다르다.
        7.삼항연산자 : 항이 3개라서 삼항연산자라고 한다.
            - 첫번쨰 항 : 조건을 넣는다 , 두번째 항 : true일때 코드 , 세번째 항 : false일때 코드
            - 조건 ? 참 : 거짓
            - (중첩) 조건1 ? 참1 : 조건2 ? 참2 : 거짓;
                - 주로 간단한/짧은 논리조건은 삼항연산자 사용

[배열]
    1. 순서대로 번호가 붙인 원소들이 연속적인 형태로 구성된 데이터 *타입*
    2. 인덱스 : 순서대로 배정된 번호. 0번부터 시작한다.
    3. 배열선언 :
        1. [ ] 대괄호
        2. [ ] 안에서 요소들을 , (쉼표)를 이용한 요소를 구분하여 열거한다.
        let 변수명 = [값1 , 값2 , 값3]
    
    4. 배열의 전체 요소 호출
        배열변수명
    
    5. 배열의 특정 요소 호출
        배열변수명[인덱스]

    6. 배열 수정
        1. 배열 변수를 전체 수정 :
            배열변수명 = [새로운 배열]
        2. 배열 변수의 특정한 요소 값 수정
            배열변수명[인덱스] = 새로운 값

    7. 배열 내 요소(값) 추가
        배열변수명.push(새로운 값); : 맨 뒤에 새로운 요소 추가
        배열변수명.splice(삽입인덱스,0,새로운값);   : 삽입인덱스의 새로운 요소 삽입 , 삽입 인덱스 뒤로 한칸 씩 밀려남

    8. 배열 내 요소(값) 삭제
        배열변수명.splice(삭제인덱스,삭제개수); : 삭제인덱스부터 개수만큼 요소 삭제
    
    9. 배열 내 요소(값) 찾기
        배열변수명.indexOf(찾을값); : 배열 내 찾을 값이 존재하면 찾은 인덱스 , 없으면 -1 반환
        배열변수명.includes(찾을값); : 배열 내 찾을 값이 존재하면 true , 없으면 false 반환

    10. 배열 내 요소 총개수 알기
        배열변수명.length;  : 배열 내 요소들의 총개수를 반환

[문자열]
    1. "큰따옴표 또는 '작은따옴표 또는 `대시로 감싼 데이터
    2. 이스케이프/제어문자
        \n : 줄바꿈 처리
        \t : 들여쓰기
        \\ : \ 출력
        \' : ' 출력
        \" : " 출력
    3. `백틱` 템플릿
        1. 문자열 사이에 ${} 표현식을 이용한 연산식을 연결할 수 있다.
        2. '문자열A ${ 연산식 } 문자열B ${연삭식} 문자열C 문자열D'
        3. HTML과 JS가 같이 사용될때 주로 사용됨. REACT()
            - HT(TEXT)ML은 문자타입만 가능한 언어
            - JS는 다양한 타입이 존재하는 언어

[DOM 객체]
    document 객체
    1. 내장 함수
        document.querySelector('선택자') : 선택자의 마크업을 JS 객체로 반환하는 함수
            - query(질의-요청할게)
            - Selector(선택자)
                -> 선택지를 요청한다.
                [선택자] : css 선택자 동일 , 1. 마크업명 2. .클래스명 3. #아이디명
                ex] document.querySelector('ol'); : html의 ol마크업을 JS객체로 요청한다.

    2. 내장 속성
        .innerHTML - 'HTML코드' : 현재 마크업 사이에 HTMl 문자열을 대입/호출할 수 있다.
            - inner(내부-현재마크업 content)
            - HTML (HTML언어)
                -> 현재 마크업에 넣을 HTML 작성


[조건문]
    1. true 와 false 에 따른 흐름 제어 , 컴퓨터가 논리/비교(상황에 따른 판단)적인 사고력
    2. 조건찾기
        예) 내가 돈이 10000원이 있다면 택시를 타고 아니면 걸어가야겠다.
            조건 : 돈 >= 10000 참 : 택시를 탄다. 거짓 : 걸어간다.
        예) 밖에 비가 오면 우산을 챙겨간다 아니면 그냥 간다.
            조건 : 날씨 == 비 참 : 우산 챙겨 거짓 : 그냥 간다.
        예) 내가 입력한 아이디와 비밀번호가 회원가입했을 때와 일치하면 로그인 성공 아니면 실패
            조건 : 입력한 아이디 == 기존아이디 && 입력한 비밀번호 == 기존 비밀번호
            참 : 로그인 성공
            거짓 : 로그인 실패

[반복문]
    1. 조건을 충족할 때 특정 범위 내 코드를 반복 실행
    2. for 형태
        for(초기값; 조건문; 증감식) {
            실행문;
        }
        1. 초기값 : 반복을 할 때 반복의 카운트하는 변수의 처음값
        2. 조건문 : 반복실행문이 실행되는 조건으로 true이면 (실행문)을 처리하고 false이면 for 종료
        3. 실행문 : 조건이 true일 때 실행할 코드
        4. 증감식 : 반복변수의 증가 혹은 감소 변화 연산식

    3. 반복문을 연습하는 법
        *추천* : 반복문 없이 코드를 작성하고 반복되는 코드와 반복되지 않는 코드, 패턴과 규칙 찾기

    4. 배열과 반복문 관계
        1. 배열은 인덱스 0부터 마지막인덱스 1씩 증가 규칙
        2. 배열의 길이 : 배열변수명.length ,
            -> 배열 내 마지막인덱스 : 배열변수명.length-1
        3. 배열의 순회/전체조회 : 배열 내 모든 요소를 하나씩 호출하는 작업
        for (let i = 0; i < 배열변수명.length; i++) {
            배열변수명[i]
        }

    5. 반복문의 주요 키워드
        1. continue : 가장 가까운 for문의 증감식으로 코드흐름 이동한다.
        2. break : 가장 가까운 for문의 { } 종료/탈출/끝내기

